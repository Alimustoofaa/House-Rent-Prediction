# -*- coding: utf-8 -*-
"""Predictive_Analytics_dicoding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Alimustoofaa/House-Rent-Prediction/blob/main/Predictive_Analytics_dicoding.ipynb

## Setup kaggle API and Download datasets
"""

!pip install -q kaggle

import json

kaggle_token = {"username":"alimustoofaa","key":"2813bea47db4baf7c78d2563796b9f12"}

with open('kaggle.json', "w") as outfile:
    json.dump(kaggle_token, outfile)

!mkdir -p ~/.kaggle
!mv kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

!kaggle datasets download -d rkb0023/houserentpredictiondataset
!unzip houserentpredictiondataset.zip

"""##Data Understanding & Removing Outlier

"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

# %matplotlib inline

df = pd.read_csv('/content/houseRent/housing_train.csv')
df.head()

"""##Data Understanding & Removing Outlier

"""

df.columns

df.shape

df.info()

df.describe()

"""# Formating Data"""

# Column id url region_url image_url description lat long tidak berpengaruh pada harga sewa, maka column akan dihapus
df  = df.drop(['id','url','region_url','image_url','description','lat','long'], axis = 'columns')
df.head()

# Merubah nilai baths menjadi int
df['baths'] = np.ceil(df['baths'])
df['baths'] = df['baths'].astype(np.int)
df.head()

"""## Univariate Analysis

"""

# Menampilkan jumlah kategori dengan column type
df.groupby('type')['type'].agg('count')

# Column type terdapat 1 sample assisted living dan 4 sample land sehingga sample tersebut akan dihapus
df.drop(df.index[df['type'] == 'assisted living'], inplace = True)
df.drop(df.index[df['type'] == 'land'], inplace = True)

df.groupby('type')['type'].agg('count')

# Menampilkan jumlah kategori dengan column laundry_options
df.groupby('laundry_options')['laundry_options'].agg('count')

# Menampilkan jumlah kategori dengan column parking_options
df.groupby('parking_options')['parking_options'].agg('count')

# Menampilkan jumlah kategori dengan column region
df.groupby('region')['region'].agg('count')

# Column region terlalu banyak memiliki kategori, maka column tersebut akan dihapus
df  = df.drop(['region'], axis = 'columns')
df.head()

# Menampilkan jumlah kategori dengan column state
df.groupby('state')['state'].agg('count')

# Column region terdapat 49 ok dan 44 or yang terlalu sedikit, maka sample tersebut akan dihapus
df.drop(df.index[df['state'] == '49'], inplace = True)
df.drop(df.index[df['state'] == '44'], inplace = True)

df.head()

# Menampilkan jumlah kategori dengan column wheelchair_access
df.groupby('wheelchair_access')['wheelchair_access'].agg('count')

# Menampilkan jumlah kategori dengan column electric_vehicle_charge
df.groupby('electric_vehicle_charge')['electric_vehicle_charge'].agg('count')

# Menampilkan jumlah kategori dengan column comes_furnished
df.groupby('comes_furnished')['comes_furnished'].agg('count')

# Menampilkan jumlah kategori dengan column cats_allowed
df.groupby('cats_allowed')['cats_allowed'].agg('count')

# Menampilkan jumlah kategori dengan column dogs_allowed
df.groupby('dogs_allowed')['dogs_allowed'].agg('count')

# Menampilkan jumlah kategori dengan column sqfeet
df.groupby('sqfeet')['sqfeet'].agg('count')

# Mengambil sqfeet yang nilainya tidak nol
df = df.loc[(df[['sqfeet']]!=0).all(axis=1)]
df.shape

# Menampilkan jumlah kategori dengan column beds
df.groupby('beds')['beds'].agg('count')

# Jumlah beds yang memiliki nilai 0 dan besar dari 8
beds = (df.beds == 0).sum()
print("Nilai 0 di kolom bed ada: ", beds)

beds = (df.beds > 8).sum()
print("Nilai besar dari 8 di kolom bed ada: ", beds)

# Drop beds yang nilainya 0
df = df.loc[(df[['beds']]!=0).all(axis=1)]
df.shape

# Drop beds yang nilainya besar dari 8

df = df.loc[(df[['beds']]<=8).all(axis=1)]
df.shape

# Menampilkan jumlah kategori dengan column baths
df.groupby('baths')['baths'].agg('count')

# Jumlah baths yang memiliki nilai 0 dan besar dari 9

beds = (df.baths == 0).sum()
print("Nilai 0 di kolom baths ada: ", beds)

beds = (df.baths > 9).sum()
print("Nilai besar dari 9 di kolom baths ada: ", beds)

# Drop beds yang nilainya 0

df = df.loc[(df[['baths']]!=0).all(axis=1)]
df.shape

# Drop beds yang nilainya besar dari 9
df = df.loc[(df[['baths']]<=9).all(axis=1)]
df.shape

df.hist(bins=50, figsize=(10,10))
plt.ticklabel_format(useOffset=False, style='plain')
plt.show()

df.price.describe().apply(lambda x: format(x, 'f'))

# Menghapus price per sqft outlier dengan mean dan one standard deviation
def remove_pps_outliers(df):
    df_out = pd.DataFrame()
    for key, subdf in df.groupby('type'):
        m = np.mean(subdf.price)
        st = np.std(subdf.price)
        reduced_df = subdf[(subdf.price>(m-st)) & (subdf.price<=(m+st))]
        df_out = pd.concat([df_out,reduced_df],ignore_index=True)
    return df_out

df = remove_pps_outliers(df)
df.shape

df.sqfeet.describe().apply(lambda x: format(x, 'f'))

# Menghapus price per sqft outlier dengan mean dan one standard deviation
def remove_pps_outliers(df):
    df_out = pd.DataFrame()
    for key, subdf in df.groupby('type'):
        m = np.mean(subdf.sqfeet)
        st = np.std(subdf.sqfeet)
        reduced_df = subdf[(subdf.sqfeet>(m-st)) & (subdf.sqfeet<=(m+st))]
        df_out = pd.concat([df_out,reduced_df],ignore_index=True)
    return df_out

df = remove_pps_outliers(df)
df.shape

"""## Multivariate Analysis"""

df.info()

cat_features = df.select_dtypes(include='object').columns.to_list()
 
for col in cat_features:
  sns.catplot(x=col, y="price", kind="bar", dodge=False, height = 4, aspect = 3,  data=df, palette="Set3")
  plt.title("Rata-rata 'price' Relatif terhadap - {}".format(col))

# Mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(df, diag_kind = 'kde')

plt.figure(figsize=(16, 14))
correlation_matrix = df.corr().round(2)
 
# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

# Dari data metrik diatas, terdapat column yang tidak berkorelasi, sehingga dihapus
df_new = df.drop(['comes_furnished', 'electric_vehicle_charge', 'wheelchair_access', 'smoking_allowed'], axis = 'columns')
df_new.head()

"""## Data Preparation

"""

df_new.head()

# One hot encoding
df_new = pd.get_dummies(data = df_new, columns = ['type'])
df_new = pd.get_dummies(data = df_new, columns = ['state'])
df_new = pd.get_dummies(data = df_new, columns = ['laundry_options'])
df_new = pd.get_dummies(data = df_new, columns = ['parking_options'])
df_new.head()

from sklearn.model_selection import train_test_split
 
X = df_new.drop(["price"],axis =1)
y = df_new["price"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.05, random_state=123)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

from sklearn.preprocessing import StandardScaler

# Normalisasi data train
numerical_features = ['sqfeet','beds', 'baths']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

# Normalisasi data test
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

"""## Modeliing"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import AdaBoostRegressor

# Siapkan dataframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest', 'Boosting'])

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error
 
knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)
 
models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

# Impor library yang dibutuhkan
from sklearn.ensemble import RandomForestRegressor
 
# buat model prediksi
RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

from sklearn.ensemble import AdaBoostRegressor
 
boosting = AdaBoostRegressor(learning_rate=0.05, random_state=55)                             
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

# Buat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])
 
# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}
 
# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3
  
# Panggil mse
mse

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
 
pd.DataFrame(pred_dict)
